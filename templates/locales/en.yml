en:
  vagrant:

#-------------------------------------------------------------------------------
# Translations for exception classes
#-------------------------------------------------------------------------------
    errors:
      base_vm_not_found: The base VM with the name '%{name}' was not found.
      box_not_found: Box '%{name}' could not be found.
      cli_missing_env: This command requires that a Vagrant environment be properly passed in as the last parameter.
      multi_vm_required: A multi-vm environment is required for name specification to this command.
      multi_vm_target_required: `vagrant %{command}` requires a specific VM name to target in a multi-VM environment.
      no_env: No Vagrant environment detected. Run `vagrant init` to set one up.
      ssh_authentication_failed: |-
        SSH authentication failed! This is typically caused by the public/private
        keypair for the SSH user not being properly set on the guest VM. Please
        verify that the guest VM is setup with the proper public key, and that
        the private key path for Vagrant is setup propery as well.
      ssh_key_bad_permissions: |-
        The private key to connect to this box via SSH has invalid permissions
        set on it. The permissions of the private key should be set to 0600, otherwise SSH will
        ignore the key. Vagrant tried to do this automatically for you but failed. Please set the
        permissions on the following file to 0600 and then try running this command again:

        <%= key_path %>
      ssh_unavailable_windows: |-
        `vagrant ssh` isn't available on the Windows platform. The
        vagrant.ppk file for use with Putty is available at:

          <%= key_path %>.ppk

        To use this create a new Putty session for `vagrant@localhost`
        on port `<%= ssh_port %>`, in the Connection>SSH>Auth
        configuration section navigate to the vagrant.ppk file,
        select it, save the session for later use, and connect.

        For a more detailed guide please consult:

          http://vagrantup.com/docs/getting-started/windows.

      virtualbox_invalid_ose: |-
        Vagrant has detected you're using an OSE ("Open Source Edition") of VirtualBox.
        Vagrant currently doesn't support any of the OSE editions due to slight API
        differences. Please download the regular package from virtualbox.org and install
        to continue.
      virtualbox_invalid_version: |-
        Vagrant has detected that you have VirtualBox version %{version} installed!
        Vagrant requires that you use at least VirtualBox version 3.2. Please install
        a more recent version of VirtualBox to continue.
      virtualbox_not_detected: |-
        Vagrant could not detect VirtualBox! Make sure VirtualBox is properly installed.
        If VirtualBox is installed, it may be an incorrect version. Vagrant currently
        requires VirtualBox 3.2.x. Please install the proper version to continue.
      vm_creation_required: VM must be created before running this command. Run `vagrant up` first.
      vm_not_found: A VM by the name of %{name} was not found.

#-------------------------------------------------------------------------------
# Translations for commands. e.g. `vagrant x`
#-------------------------------------------------------------------------------
    commands:
      common:
        vm_not_created: "VM not created. Moving on..."
      box:
        no_installed_boxes: "There are no installed boxes! Use `vagrant box add` to add some."
      ssh:
        execute: "Execute: %{command}"
      status:
        output: |-
          Current VM states:

          %{states}

          %{message}
        not_created: |-
          The environment has not yet been created. Run `vagrant up` to
          create the environment.
        powered_off: The VM is powered off. To restart the VM, simply run `vagrant up`
        running: |-
          The VM is running. To stop this VM, you can run `vagrant halt` to
          shut it down forcefully, or you can run `vagrant suspend` to simply
          suspend the virtual machine. In either case, to restart it again,
          simply run `vagrant up`.
        saved: To resume this VM, simply run `vagrant up`.
        listing: |-
          This environment represents multiple VMs. The VMs are all listed
          above with their current state. For more information about a specific
          VM, run `vagrant status NAME`.
      up:
        vm_created: "VM already created. Booting if its not already running..."
      version:
        output: "Vagrant version %{version}"

#-------------------------------------------------------------------------------
# Translations for Vagrant middleware acions
#-------------------------------------------------------------------------------
    actions:
      vm:
        boot:
          booting: Booting VM...
          waiting: Waiting for VM to boot. This can take a few minutes.
          ready: VM booted and ready for use!
          failed: Failed to connect to VM!
        check_box:
          not_found: Box %{name} was not found. Fetching box from specified URL...
        check_guest_additions:
          not_detected: |-
            No guest additions were detected on the base box for this VM! Guest
            additions are required for forwarded ports, shared folders, host only
            networking, and more. If SSH fails on this machine, please install
            the guest additions and repackage the box to continue.

            This is not an error message; everything may continue to work properly,
            in which case you may ignore this message.
          version_mismatch: |-
            The guest additions on this VM do not match the install version of
            VirtualBox! This may cause things such as forwared ports, shared
            folders, and more to not work properly. If any of those things fail on
            this machine, please update the guest additions and repackage the
            box.

            Guest Additions Version: %{guest_version}
            VirtualBox Version: %{virtualbox_version}
        clear_forward_ports:
          deleting: Clearing any previously set forwarded ports...
        clear_shared_folders:
          deleting: Cleaing previously set shared folders...
        customize:
          running: Running any VM customizations...
        destroy:
          destroying: Destroying VM and associated drives...
        destroy_network:
          destroying: Destroying unused networking interface...
        disable_networks:
          disabling: Disabling host only networks...
        discard_state:
          discarding: Discarding saved state of VM...
        export:
          create_dir: Creating temporary directory for export...
          exporting: Exporting VM...
        forward_ports:
          fixed_collision: Fixed port collision '%{name}'. Now on port %{new_port}.
          forwarding: Forwarding ports...
          forwarding_entry: "-- %{name}: %{guest_port} => %{host_port} (adapter %{adapter})"
          non_nat: |-
            VirtualBox adapter #%{adapter} not configured as "NAT"
            Skipping port forwarding '%{name}'.
        halt:
          force: Forcing shutdown of VM...
        import:
          importing: Importing base box '%{name}'...
        match_mac:
          matching: Matching MAC address for NAT networking...
        network:
          enabling: Enabling host only network...
          preparing: Preparing host only network...
          creating: Creating new host only network for environment...
        nfs:
          exporting: Exporting NFS shared folders...
          mounting: Mounting NFS shared folders...
        persist:
          persisting: Persisting the VM UUID (%{uuid})...
        provision:
          beginning: Beginning provisioning process...
          enabled: Provisioning enabled with %{provisioner}...
        resume:
          resuming: Resuming suspended VM...
        share_folders:
          creating: Creating shared folders metadata...
          mounting: Mounting shared folders...
          mounting_entry: "-- %{name}: %{guest_path}"
        suspend:
          suspending: Saving VM state and suspending execution...

      box:
        destroy:
          destroying: Deleting box '%{name}'...
        download:
          with: Downloading with %{class}...
          cleaning: Cleaning up downloaded box...
          copying: Copying box to temporary location...
        unpackage:
          extracting: Extracting box...
        verify:
          verifying: Verifying box...

      general:
        package:
          packaging: "Packaging additional file: %{file}"
          compressing: "Compressing package to: %w{tar_path}"

    hosts:
      bsd:
        nfs_export:
          prepare: "Preparing to edit /etc/exports. Administrator priveleges will be required..."
      linux:
        nfs_export:
          prepare: "Preparing to edit /etc/exports. Administrator priveleges will be required..."

    provisioners:
      chef:
        json: "Generating chef JSON and uploading..."
        client_key_folder: "Creating folder to hold client key..."
        upload_validation_key: "Uploading chef client validation key..."
        running_client: "Running chef-client..."
        running_solo: "Running chef-solo..."

    systems:
      linux:
        attempting_halt: "Attempting graceful shutdown of linux..."
