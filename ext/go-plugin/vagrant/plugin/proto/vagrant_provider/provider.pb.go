// Code generated by protoc-gen-go. DO NOT EDIT.
// source: vagrant_provider/provider.proto

package vagrant_provider

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import vagrant_caps "github.com/hashicorp/vagrant/ext/go-plugin/vagrant/plugin/proto/vagrant_caps"
import vagrant_common "github.com/hashicorp/vagrant/ext/go-plugin/vagrant/plugin/proto/vagrant_common"
import vagrant_config "github.com/hashicorp/vagrant/ext/go-plugin/vagrant/plugin/proto/vagrant_config"
import vagrant_io "github.com/hashicorp/vagrant/ext/go-plugin/vagrant/plugin/proto/vagrant_io"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ActionRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Machine              string   `protobuf:"bytes,2,opt,name=machine,proto3" json:"machine,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActionRequest) Reset()         { *m = ActionRequest{} }
func (m *ActionRequest) String() string { return proto.CompactTextString(m) }
func (*ActionRequest) ProtoMessage()    {}
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28396c8d66e1a9b4, []int{0}
}
func (m *ActionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionRequest.Unmarshal(m, b)
}
func (m *ActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionRequest.Marshal(b, m, deterministic)
}
func (m *ActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionRequest.Merge(m, src)
}
func (m *ActionRequest) XXX_Size() int {
	return xxx_messageInfo_ActionRequest.Size(m)
}
func (m *ActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ActionRequest proto.InternalMessageInfo

func (m *ActionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ActionRequest) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

type ActionResponse struct {
	Result               []string `protobuf:"bytes,1,rep,name=result,proto3" json:"result,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ActionResponse) Reset()         { *m = ActionResponse{} }
func (m *ActionResponse) String() string { return proto.CompactTextString(m) }
func (*ActionResponse) ProtoMessage()    {}
func (*ActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28396c8d66e1a9b4, []int{1}
}
func (m *ActionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ActionResponse.Unmarshal(m, b)
}
func (m *ActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ActionResponse.Marshal(b, m, deterministic)
}
func (m *ActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ActionResponse.Merge(m, src)
}
func (m *ActionResponse) XXX_Size() int {
	return xxx_messageInfo_ActionResponse.Size(m)
}
func (m *ActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ActionResponse proto.InternalMessageInfo

func (m *ActionResponse) GetResult() []string {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *ActionResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type InfoResponse struct {
	Capabilities         []string `protobuf:"bytes,1,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	Description          string   `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Priority             int64    `protobuf:"varint,3,opt,name=priority,proto3" json:"priority,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoResponse) Reset()         { *m = InfoResponse{} }
func (m *InfoResponse) String() string { return proto.CompactTextString(m) }
func (*InfoResponse) ProtoMessage()    {}
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28396c8d66e1a9b4, []int{2}
}
func (m *InfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InfoResponse.Unmarshal(m, b)
}
func (m *InfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InfoResponse.Marshal(b, m, deterministic)
}
func (m *InfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResponse.Merge(m, src)
}
func (m *InfoResponse) XXX_Size() int {
	return xxx_messageInfo_InfoResponse.Size(m)
}
func (m *InfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResponse proto.InternalMessageInfo

func (m *InfoResponse) GetCapabilities() []string {
	if m != nil {
		return m.Capabilities
	}
	return nil
}

func (m *InfoResponse) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *InfoResponse) GetPriority() int64 {
	if m != nil {
		return m.Priority
	}
	return 0
}

type RunActionRequest struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Machine              string   `protobuf:"bytes,3,opt,name=machine,proto3" json:"machine,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunActionRequest) Reset()         { *m = RunActionRequest{} }
func (m *RunActionRequest) String() string { return proto.CompactTextString(m) }
func (*RunActionRequest) ProtoMessage()    {}
func (*RunActionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_28396c8d66e1a9b4, []int{3}
}
func (m *RunActionRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunActionRequest.Unmarshal(m, b)
}
func (m *RunActionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunActionRequest.Marshal(b, m, deterministic)
}
func (m *RunActionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunActionRequest.Merge(m, src)
}
func (m *RunActionRequest) XXX_Size() int {
	return xxx_messageInfo_RunActionRequest.Size(m)
}
func (m *RunActionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RunActionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RunActionRequest proto.InternalMessageInfo

func (m *RunActionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *RunActionRequest) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *RunActionRequest) GetMachine() string {
	if m != nil {
		return m.Machine
	}
	return ""
}

type RunActionResponse struct {
	Data                 string   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Error                string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RunActionResponse) Reset()         { *m = RunActionResponse{} }
func (m *RunActionResponse) String() string { return proto.CompactTextString(m) }
func (*RunActionResponse) ProtoMessage()    {}
func (*RunActionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28396c8d66e1a9b4, []int{4}
}
func (m *RunActionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RunActionResponse.Unmarshal(m, b)
}
func (m *RunActionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RunActionResponse.Marshal(b, m, deterministic)
}
func (m *RunActionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RunActionResponse.Merge(m, src)
}
func (m *RunActionResponse) XXX_Size() int {
	return xxx_messageInfo_RunActionResponse.Size(m)
}
func (m *RunActionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RunActionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RunActionResponse proto.InternalMessageInfo

func (m *RunActionResponse) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *RunActionResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type SshInfoResponse struct {
	Host                 string   `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port                 int64    `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	PrivateKeyPath       string   `protobuf:"bytes,3,opt,name=private_key_path,json=privateKeyPath,proto3" json:"private_key_path,omitempty"`
	Username             string   `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Error                string   `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SshInfoResponse) Reset()         { *m = SshInfoResponse{} }
func (m *SshInfoResponse) String() string { return proto.CompactTextString(m) }
func (*SshInfoResponse) ProtoMessage()    {}
func (*SshInfoResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28396c8d66e1a9b4, []int{5}
}
func (m *SshInfoResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SshInfoResponse.Unmarshal(m, b)
}
func (m *SshInfoResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SshInfoResponse.Marshal(b, m, deterministic)
}
func (m *SshInfoResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SshInfoResponse.Merge(m, src)
}
func (m *SshInfoResponse) XXX_Size() int {
	return xxx_messageInfo_SshInfoResponse.Size(m)
}
func (m *SshInfoResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SshInfoResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SshInfoResponse proto.InternalMessageInfo

func (m *SshInfoResponse) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *SshInfoResponse) GetPort() int64 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SshInfoResponse) GetPrivateKeyPath() string {
	if m != nil {
		return m.PrivateKeyPath
	}
	return ""
}

func (m *SshInfoResponse) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *SshInfoResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

type StateResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ShortDescription     string   `protobuf:"bytes,2,opt,name=short_description,json=shortDescription,proto3" json:"short_description,omitempty"`
	LongDescription      string   `protobuf:"bytes,3,opt,name=long_description,json=longDescription,proto3" json:"long_description,omitempty"`
	Error                string   `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StateResponse) Reset()         { *m = StateResponse{} }
func (m *StateResponse) String() string { return proto.CompactTextString(m) }
func (*StateResponse) ProtoMessage()    {}
func (*StateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_28396c8d66e1a9b4, []int{6}
}
func (m *StateResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StateResponse.Unmarshal(m, b)
}
func (m *StateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StateResponse.Marshal(b, m, deterministic)
}
func (m *StateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StateResponse.Merge(m, src)
}
func (m *StateResponse) XXX_Size() int {
	return xxx_messageInfo_StateResponse.Size(m)
}
func (m *StateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StateResponse proto.InternalMessageInfo

func (m *StateResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *StateResponse) GetShortDescription() string {
	if m != nil {
		return m.ShortDescription
	}
	return ""
}

func (m *StateResponse) GetLongDescription() string {
	if m != nil {
		return m.LongDescription
	}
	return ""
}

func (m *StateResponse) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func init() {
	proto.RegisterType((*ActionRequest)(nil), "vagrant.provider.ActionRequest")
	proto.RegisterType((*ActionResponse)(nil), "vagrant.provider.ActionResponse")
	proto.RegisterType((*InfoResponse)(nil), "vagrant.provider.InfoResponse")
	proto.RegisterType((*RunActionRequest)(nil), "vagrant.provider.RunActionRequest")
	proto.RegisterType((*RunActionResponse)(nil), "vagrant.provider.RunActionResponse")
	proto.RegisterType((*SshInfoResponse)(nil), "vagrant.provider.SshInfoResponse")
	proto.RegisterType((*StateResponse)(nil), "vagrant.provider.StateResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ProviderClient is the client API for Provider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProviderClient interface {
	Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	Info(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*InfoResponse, error)
	IsInstalled(ctx context.Context, in *vagrant_common.EmptyRequest, opts ...grpc.CallOption) (*vagrant_common.IsResponse, error)
	IsUsable(ctx context.Context, in *vagrant_common.EmptyRequest, opts ...grpc.CallOption) (*vagrant_common.IsResponse, error)
	MachineIdChanged(ctx context.Context, in *vagrant_common.EmptyRequest, opts ...grpc.CallOption) (*vagrant_common.EmptyResponse, error)
	Name(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*vagrant_common.NameResponse, error)
	RunAction(ctx context.Context, in *RunActionRequest, opts ...grpc.CallOption) (*RunActionResponse, error)
	SshInfo(ctx context.Context, in *vagrant_common.EmptyRequest, opts ...grpc.CallOption) (*SshInfoResponse, error)
	State(ctx context.Context, in *vagrant_common.EmptyRequest, opts ...grpc.CallOption) (*StateResponse, error)
	// These are IO helpers for streaming
	Read(ctx context.Context, in *vagrant_io.ReadRequest, opts ...grpc.CallOption) (*vagrant_io.ReadResponse, error)
	Write(ctx context.Context, in *vagrant_io.WriteRequest, opts ...grpc.CallOption) (*vagrant_io.WriteResponse, error)
	// These are Config helpers
	ConfigAttributes(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*vagrant_config.AttributesResponse, error)
	ConfigLoad(ctx context.Context, in *vagrant_config.LoadRequest, opts ...grpc.CallOption) (*vagrant_config.LoadResponse, error)
	ConfigValidate(ctx context.Context, in *vagrant_config.ValidateRequest, opts ...grpc.CallOption) (*vagrant_config.ValidateResponse, error)
	ConfigFinalize(ctx context.Context, in *vagrant_config.FinalizeRequest, opts ...grpc.CallOption) (*vagrant_config.FinalizeResponse, error)
	// Capabilities
	GuestCapabilities(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*vagrant_caps.CapabilitiesResponse, error)
	GuestCapability(ctx context.Context, in *vagrant_caps.GuestCapabilityRequest, opts ...grpc.CallOption) (*vagrant_caps.GuestCapabilityResponse, error)
	HostCapabilities(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*vagrant_caps.CapabilitiesResponse, error)
	HostCapability(ctx context.Context, in *vagrant_caps.HostCapabilityRequest, opts ...grpc.CallOption) (*vagrant_caps.HostCapabilityResponse, error)
	ProviderCapabilities(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*vagrant_caps.ProviderCapabilitiesResponse, error)
	ProviderCapability(ctx context.Context, in *vagrant_caps.ProviderCapabilityRequest, opts ...grpc.CallOption) (*vagrant_caps.ProviderCapabilityResponse, error)
}

type providerClient struct {
	cc *grpc.ClientConn
}

func NewProviderClient(cc *grpc.ClientConn) ProviderClient {
	return &providerClient{cc}
}

func (c *providerClient) Action(ctx context.Context, in *ActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/Action", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Info(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*InfoResponse, error) {
	out := new(InfoResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/Info", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) IsInstalled(ctx context.Context, in *vagrant_common.EmptyRequest, opts ...grpc.CallOption) (*vagrant_common.IsResponse, error) {
	out := new(vagrant_common.IsResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/IsInstalled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) IsUsable(ctx context.Context, in *vagrant_common.EmptyRequest, opts ...grpc.CallOption) (*vagrant_common.IsResponse, error) {
	out := new(vagrant_common.IsResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/IsUsable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) MachineIdChanged(ctx context.Context, in *vagrant_common.EmptyRequest, opts ...grpc.CallOption) (*vagrant_common.EmptyResponse, error) {
	out := new(vagrant_common.EmptyResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/MachineIdChanged", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Name(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*vagrant_common.NameResponse, error) {
	out := new(vagrant_common.NameResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/Name", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) RunAction(ctx context.Context, in *RunActionRequest, opts ...grpc.CallOption) (*RunActionResponse, error) {
	out := new(RunActionResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/RunAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) SshInfo(ctx context.Context, in *vagrant_common.EmptyRequest, opts ...grpc.CallOption) (*SshInfoResponse, error) {
	out := new(SshInfoResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/SshInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) State(ctx context.Context, in *vagrant_common.EmptyRequest, opts ...grpc.CallOption) (*StateResponse, error) {
	out := new(StateResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/State", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Read(ctx context.Context, in *vagrant_io.ReadRequest, opts ...grpc.CallOption) (*vagrant_io.ReadResponse, error) {
	out := new(vagrant_io.ReadResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/Read", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) Write(ctx context.Context, in *vagrant_io.WriteRequest, opts ...grpc.CallOption) (*vagrant_io.WriteResponse, error) {
	out := new(vagrant_io.WriteResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ConfigAttributes(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*vagrant_config.AttributesResponse, error) {
	out := new(vagrant_config.AttributesResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/ConfigAttributes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ConfigLoad(ctx context.Context, in *vagrant_config.LoadRequest, opts ...grpc.CallOption) (*vagrant_config.LoadResponse, error) {
	out := new(vagrant_config.LoadResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/ConfigLoad", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ConfigValidate(ctx context.Context, in *vagrant_config.ValidateRequest, opts ...grpc.CallOption) (*vagrant_config.ValidateResponse, error) {
	out := new(vagrant_config.ValidateResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/ConfigValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ConfigFinalize(ctx context.Context, in *vagrant_config.FinalizeRequest, opts ...grpc.CallOption) (*vagrant_config.FinalizeResponse, error) {
	out := new(vagrant_config.FinalizeResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/ConfigFinalize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GuestCapabilities(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*vagrant_caps.CapabilitiesResponse, error) {
	out := new(vagrant_caps.CapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/GuestCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) GuestCapability(ctx context.Context, in *vagrant_caps.GuestCapabilityRequest, opts ...grpc.CallOption) (*vagrant_caps.GuestCapabilityResponse, error) {
	out := new(vagrant_caps.GuestCapabilityResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/GuestCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) HostCapabilities(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*vagrant_caps.CapabilitiesResponse, error) {
	out := new(vagrant_caps.CapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/HostCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) HostCapability(ctx context.Context, in *vagrant_caps.HostCapabilityRequest, opts ...grpc.CallOption) (*vagrant_caps.HostCapabilityResponse, error) {
	out := new(vagrant_caps.HostCapabilityResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/HostCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ProviderCapabilities(ctx context.Context, in *vagrant_common.NullRequest, opts ...grpc.CallOption) (*vagrant_caps.ProviderCapabilitiesResponse, error) {
	out := new(vagrant_caps.ProviderCapabilitiesResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/ProviderCapabilities", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *providerClient) ProviderCapability(ctx context.Context, in *vagrant_caps.ProviderCapabilityRequest, opts ...grpc.CallOption) (*vagrant_caps.ProviderCapabilityResponse, error) {
	out := new(vagrant_caps.ProviderCapabilityResponse)
	err := c.cc.Invoke(ctx, "/vagrant.provider.Provider/ProviderCapability", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProviderServer is the server API for Provider service.
type ProviderServer interface {
	Action(context.Context, *ActionRequest) (*ActionResponse, error)
	Info(context.Context, *vagrant_common.NullRequest) (*InfoResponse, error)
	IsInstalled(context.Context, *vagrant_common.EmptyRequest) (*vagrant_common.IsResponse, error)
	IsUsable(context.Context, *vagrant_common.EmptyRequest) (*vagrant_common.IsResponse, error)
	MachineIdChanged(context.Context, *vagrant_common.EmptyRequest) (*vagrant_common.EmptyResponse, error)
	Name(context.Context, *vagrant_common.NullRequest) (*vagrant_common.NameResponse, error)
	RunAction(context.Context, *RunActionRequest) (*RunActionResponse, error)
	SshInfo(context.Context, *vagrant_common.EmptyRequest) (*SshInfoResponse, error)
	State(context.Context, *vagrant_common.EmptyRequest) (*StateResponse, error)
	// These are IO helpers for streaming
	Read(context.Context, *vagrant_io.ReadRequest) (*vagrant_io.ReadResponse, error)
	Write(context.Context, *vagrant_io.WriteRequest) (*vagrant_io.WriteResponse, error)
	// These are Config helpers
	ConfigAttributes(context.Context, *vagrant_common.NullRequest) (*vagrant_config.AttributesResponse, error)
	ConfigLoad(context.Context, *vagrant_config.LoadRequest) (*vagrant_config.LoadResponse, error)
	ConfigValidate(context.Context, *vagrant_config.ValidateRequest) (*vagrant_config.ValidateResponse, error)
	ConfigFinalize(context.Context, *vagrant_config.FinalizeRequest) (*vagrant_config.FinalizeResponse, error)
	// Capabilities
	GuestCapabilities(context.Context, *vagrant_common.NullRequest) (*vagrant_caps.CapabilitiesResponse, error)
	GuestCapability(context.Context, *vagrant_caps.GuestCapabilityRequest) (*vagrant_caps.GuestCapabilityResponse, error)
	HostCapabilities(context.Context, *vagrant_common.NullRequest) (*vagrant_caps.CapabilitiesResponse, error)
	HostCapability(context.Context, *vagrant_caps.HostCapabilityRequest) (*vagrant_caps.HostCapabilityResponse, error)
	ProviderCapabilities(context.Context, *vagrant_common.NullRequest) (*vagrant_caps.ProviderCapabilitiesResponse, error)
	ProviderCapability(context.Context, *vagrant_caps.ProviderCapabilityRequest) (*vagrant_caps.ProviderCapabilityResponse, error)
}

func RegisterProviderServer(s *grpc.Server, srv ProviderServer) {
	s.RegisterService(&_Provider_serviceDesc, srv)
}

func _Provider_Action_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Action(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/Action",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Action(ctx, req.(*ActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/Info",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Info(ctx, req.(*vagrant_common.NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_IsInstalled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).IsInstalled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/IsInstalled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).IsInstalled(ctx, req.(*vagrant_common.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_IsUsable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).IsUsable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/IsUsable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).IsUsable(ctx, req.(*vagrant_common.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_MachineIdChanged_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).MachineIdChanged(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/MachineIdChanged",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).MachineIdChanged(ctx, req.(*vagrant_common.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Name_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Name(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/Name",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Name(ctx, req.(*vagrant_common.NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_RunAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).RunAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/RunAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).RunAction(ctx, req.(*RunActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_SshInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).SshInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/SshInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).SshInfo(ctx, req.(*vagrant_common.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.EmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/State",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).State(ctx, req.(*vagrant_common.EmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Read_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_io.ReadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Read(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/Read",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Read(ctx, req.(*vagrant_io.ReadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_io.WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).Write(ctx, req.(*vagrant_io.WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ConfigAttributes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ConfigAttributes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/ConfigAttributes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ConfigAttributes(ctx, req.(*vagrant_common.NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ConfigLoad_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_config.LoadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ConfigLoad(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/ConfigLoad",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ConfigLoad(ctx, req.(*vagrant_config.LoadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ConfigValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_config.ValidateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ConfigValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/ConfigValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ConfigValidate(ctx, req.(*vagrant_config.ValidateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ConfigFinalize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_config.FinalizeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ConfigFinalize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/ConfigFinalize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ConfigFinalize(ctx, req.(*vagrant_config.FinalizeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GuestCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GuestCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/GuestCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GuestCapabilities(ctx, req.(*vagrant_common.NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_GuestCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_caps.GuestCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).GuestCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/GuestCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).GuestCapability(ctx, req.(*vagrant_caps.GuestCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_HostCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).HostCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/HostCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).HostCapabilities(ctx, req.(*vagrant_common.NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_HostCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_caps.HostCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).HostCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/HostCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).HostCapability(ctx, req.(*vagrant_caps.HostCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ProviderCapabilities_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_common.NullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ProviderCapabilities(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/ProviderCapabilities",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ProviderCapabilities(ctx, req.(*vagrant_common.NullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Provider_ProviderCapability_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(vagrant_caps.ProviderCapabilityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProviderServer).ProviderCapability(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vagrant.provider.Provider/ProviderCapability",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProviderServer).ProviderCapability(ctx, req.(*vagrant_caps.ProviderCapabilityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Provider_serviceDesc = grpc.ServiceDesc{
	ServiceName: "vagrant.provider.Provider",
	HandlerType: (*ProviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Action",
			Handler:    _Provider_Action_Handler,
		},
		{
			MethodName: "Info",
			Handler:    _Provider_Info_Handler,
		},
		{
			MethodName: "IsInstalled",
			Handler:    _Provider_IsInstalled_Handler,
		},
		{
			MethodName: "IsUsable",
			Handler:    _Provider_IsUsable_Handler,
		},
		{
			MethodName: "MachineIdChanged",
			Handler:    _Provider_MachineIdChanged_Handler,
		},
		{
			MethodName: "Name",
			Handler:    _Provider_Name_Handler,
		},
		{
			MethodName: "RunAction",
			Handler:    _Provider_RunAction_Handler,
		},
		{
			MethodName: "SshInfo",
			Handler:    _Provider_SshInfo_Handler,
		},
		{
			MethodName: "State",
			Handler:    _Provider_State_Handler,
		},
		{
			MethodName: "Read",
			Handler:    _Provider_Read_Handler,
		},
		{
			MethodName: "Write",
			Handler:    _Provider_Write_Handler,
		},
		{
			MethodName: "ConfigAttributes",
			Handler:    _Provider_ConfigAttributes_Handler,
		},
		{
			MethodName: "ConfigLoad",
			Handler:    _Provider_ConfigLoad_Handler,
		},
		{
			MethodName: "ConfigValidate",
			Handler:    _Provider_ConfigValidate_Handler,
		},
		{
			MethodName: "ConfigFinalize",
			Handler:    _Provider_ConfigFinalize_Handler,
		},
		{
			MethodName: "GuestCapabilities",
			Handler:    _Provider_GuestCapabilities_Handler,
		},
		{
			MethodName: "GuestCapability",
			Handler:    _Provider_GuestCapability_Handler,
		},
		{
			MethodName: "HostCapabilities",
			Handler:    _Provider_HostCapabilities_Handler,
		},
		{
			MethodName: "HostCapability",
			Handler:    _Provider_HostCapability_Handler,
		},
		{
			MethodName: "ProviderCapabilities",
			Handler:    _Provider_ProviderCapabilities_Handler,
		},
		{
			MethodName: "ProviderCapability",
			Handler:    _Provider_ProviderCapability_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vagrant_provider/provider.proto",
}

func init() { proto.RegisterFile("vagrant_provider/provider.proto", fileDescriptor_28396c8d66e1a9b4) }

var fileDescriptor_28396c8d66e1a9b4 = []byte{
	// 830 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x5d, 0x6f, 0xf3, 0x34,
	0x14, 0xc7, 0xd5, 0x35, 0xdd, 0xcb, 0xd9, 0xd6, 0x75, 0xd6, 0x04, 0xa5, 0xbc, 0xac, 0x74, 0x43,
	0x14, 0x10, 0x8d, 0x04, 0x57, 0x48, 0x0c, 0x69, 0xea, 0xd8, 0x28, 0x83, 0x31, 0xb5, 0x03, 0x2e,
	0x26, 0x51, 0xb9, 0x8d, 0x97, 0x58, 0xa4, 0x71, 0xb0, 0x9d, 0x89, 0xf2, 0x1d, 0xb8, 0xe4, 0x8e,
	0x0f, 0xfb, 0x28, 0x89, 0xed, 0xe6, 0xa5, 0x6b, 0x27, 0x3d, 0xbd, 0xaa, 0x7d, 0xce, 0xff, 0xfc,
	0x7c, 0x7c, 0xec, 0x13, 0x17, 0x4e, 0x9f, 0xb1, 0xcb, 0x71, 0x20, 0xc7, 0x21, 0x67, 0xcf, 0xd4,
	0x21, 0xdc, 0xd6, 0x83, 0x5e, 0xc8, 0x99, 0x64, 0xa8, 0xa1, 0x04, 0x3d, 0x6d, 0x6f, 0x8d, 0x5d,
	0x2a, 0xbd, 0x68, 0xd2, 0x9b, 0xb2, 0x99, 0xed, 0x61, 0xe1, 0xd1, 0x29, 0xe3, 0xa1, 0xad, 0x64,
	0x36, 0xf9, 0x5b, 0xda, 0x2e, 0xfb, 0x32, 0xf4, 0x23, 0x97, 0x06, 0xc6, 0xaa, 0xa6, 0x09, 0x52,
	0x1b, 0xc7, 0x53, 0x1c, 0x0a, 0x7b, 0x8a, 0x43, 0x3c, 0xa1, 0x3e, 0x95, 0x94, 0x88, 0x74, 0xc9,
	0xd6, 0xe3, 0xc6, 0x16, 0x60, 0xb3, 0x19, 0x0b, 0xec, 0xf4, 0x67, 0xf3, 0xf0, 0xe0, 0x89, 0xba,
	0x76, 0xfa, 0xa3, 0xe0, 0xa3, 0x4d, 0xc1, 0x29, 0xb3, 0x29, 0x4b, 0xa1, 0x9d, 0x0b, 0x38, 0xbc,
	0x9c, 0x4a, 0xca, 0x82, 0x21, 0xf9, 0x2b, 0x22, 0x42, 0x22, 0x04, 0x56, 0x80, 0x67, 0xa4, 0x59,
	0x69, 0x57, 0xba, 0x7b, 0xc3, 0x64, 0x8c, 0x9a, 0xb0, 0x33, 0xc3, 0x53, 0x8f, 0x06, 0xa4, 0xb9,
	0x95, 0x98, 0xf5, 0xb4, 0xf3, 0x1d, 0xd4, 0x75, 0xb8, 0x08, 0x59, 0x20, 0x08, 0x7a, 0x07, 0xb6,
	0x39, 0x11, 0x91, 0x2f, 0x9b, 0x95, 0x76, 0xb5, 0xbb, 0x37, 0x54, 0x33, 0x74, 0x02, 0x35, 0xc2,
	0x39, 0xe3, 0x8a, 0x90, 0x4e, 0x3a, 0x21, 0x1c, 0x0c, 0x82, 0x27, 0x66, 0xa2, 0x3b, 0x70, 0x90,
	0x3d, 0x33, 0xc5, 0xc8, 0xd9, 0x50, 0x1b, 0xf6, 0x1d, 0x22, 0xa6, 0x9c, 0x86, 0xf1, 0xc2, 0x8a,
	0x97, 0x35, 0xa1, 0x16, 0xec, 0x86, 0x9c, 0x32, 0x4e, 0xe5, 0xbc, 0x59, 0x6d, 0x57, 0xba, 0xd5,
	0xa1, 0x99, 0x77, 0x1e, 0xa0, 0x31, 0x8c, 0x82, 0xf5, 0x7b, 0x46, 0x60, 0x39, 0x58, 0x62, 0x85,
	0x4f, 0xc6, 0xd9, 0x3a, 0x54, 0xf3, 0x75, 0xb8, 0x80, 0xe3, 0x0c, 0x55, 0x6d, 0x46, 0x23, 0x2a,
	0x19, 0xc4, 0xf2, 0x32, 0xfc, 0x57, 0x81, 0xa3, 0x91, 0xf0, 0x72, 0xa5, 0x40, 0x60, 0x79, 0x4c,
	0x48, 0x1d, 0x1d, 0x8f, 0x63, 0x5b, 0xc8, 0xb8, 0x4c, 0x82, 0xab, 0xc3, 0x64, 0x8c, 0xba, 0xd0,
	0x08, 0x39, 0x7d, 0xc6, 0x92, 0x8c, 0xff, 0x24, 0xf3, 0x71, 0x88, 0xa5, 0xa7, 0xb2, 0xab, 0x2b,
	0xfb, 0x2d, 0x99, 0xdf, 0x63, 0xe9, 0xc5, 0x65, 0x89, 0x04, 0xe1, 0xc9, 0x56, 0xad, 0x44, 0x61,
	0xe6, 0x8b, 0xbc, 0x6a, 0xd9, 0xbc, 0xfe, 0xad, 0xc0, 0xe1, 0x48, 0x62, 0x49, 0x4c, 0x56, 0x75,
	0xd8, 0xa2, 0x8e, 0xca, 0x69, 0x8b, 0x3a, 0xe8, 0x0b, 0x38, 0x16, 0x1e, 0xe3, 0x72, 0x5c, 0x3e,
	0x92, 0x46, 0xe2, 0xb8, 0xca, 0x9c, 0xcb, 0x67, 0xd0, 0xf0, 0x59, 0xe0, 0xe6, 0xb4, 0x69, 0xaa,
	0x47, 0xb1, 0x3d, 0x2b, 0x35, 0xf9, 0x58, 0x99, 0x7c, 0xbe, 0xfa, 0xff, 0x10, 0x76, 0xef, 0xd5,
	0xa7, 0x02, 0xdd, 0xc2, 0x76, 0x5a, 0x70, 0x74, 0xda, 0x2b, 0x7e, 0x47, 0x7a, 0xb9, 0x03, 0x6e,
	0xb5, 0x5f, 0x16, 0xa8, 0x7d, 0xf5, 0xc1, 0x8a, 0xab, 0x8f, 0xde, 0x37, 0x4a, 0xd5, 0xd8, 0x77,
	0x91, 0xef, 0x6b, 0xcc, 0x47, 0x65, 0x4c, 0xee, 0xc8, 0x6e, 0x60, 0x7f, 0x20, 0x06, 0x81, 0x90,
	0xd8, 0xf7, 0x89, 0x83, 0x3e, 0x28, 0xb2, 0xbe, 0x9f, 0x85, 0x72, 0xae, 0x61, 0xad, 0xa2, 0x77,
	0x20, 0x0c, 0xe8, 0x0a, 0x76, 0x07, 0xe2, 0x57, 0x81, 0x27, 0x3e, 0x79, 0x0b, 0xca, 0x2f, 0xd0,
	0xf8, 0x39, 0xbd, 0x9f, 0x03, 0xa7, 0xef, 0xe1, 0xc0, 0x5d, 0x9b, 0xd3, 0x87, 0x2f, 0x78, 0x15,
	0xf0, 0x12, 0xac, 0xbb, 0xf8, 0xb2, 0xac, 0x2c, 0x52, 0x69, 0x85, 0x38, 0xc4, 0x20, 0x1e, 0x60,
	0xcf, 0x34, 0x0a, 0xea, 0x94, 0xeb, 0x59, 0xec, 0xcd, 0xd6, 0xd9, 0x4a, 0x8d, 0xa2, 0xfe, 0x08,
	0x3b, 0xaa, 0x7d, 0xd6, 0x6c, 0xf0, 0xe3, 0x32, 0xad, 0xd8, 0x77, 0xd7, 0x50, 0x4b, 0xae, 0xfc,
	0x1a, 0xd2, 0x92, 0x3b, 0x97, 0xef, 0x94, 0x6f, 0xc0, 0x1a, 0x12, 0xec, 0xa0, 0x77, 0x8d, 0x90,
	0xb2, 0x5e, 0x6c, 0xd1, 0x84, 0x66, 0xd9, 0xa1, 0x42, 0xbf, 0x85, 0xda, 0xef, 0x9c, 0x4a, 0x82,
	0x72, 0x92, 0xc4, 0xa4, 0x83, 0xdf, 0x5b, 0xe2, 0x51, 0xd1, 0x23, 0x68, 0xf4, 0x93, 0x77, 0xe3,
	0x52, 0x4a, 0x4e, 0x27, 0x91, 0x24, 0x62, 0xf5, 0x89, 0x75, 0x32, 0xce, 0xe4, 0xbd, 0x59, 0x04,
	0x66, 0xae, 0x36, 0xa4, 0xd0, 0x9f, 0x18, 0x76, 0x72, 0xb8, 0x24, 0x22, 0xb6, 0x2e, 0xbb, 0x00,
	0x19, 0xa7, 0xc9, 0xae, 0x9e, 0x82, 0x7e, 0xc3, 0x3e, 0x75, 0xe2, 0x3a, 0x9f, 0x16, 0xf5, 0xda,
	0x53, 0xee, 0xde, 0x92, 0xa0, 0x08, 0xbd, 0xa6, 0x01, 0xf6, 0xe9, 0x3f, 0x4b, 0xa0, 0xda, 0xf3,
	0x22, 0x74, 0x21, 0x30, 0x57, 0xf5, 0xf8, 0x26, 0x96, 0xf6, 0xb3, 0x8f, 0xcf, 0x6b, 0x0b, 0x89,
	0x43, 0xd1, 0xcb, 0x06, 0x1a, 0xea, 0x1f, 0x70, 0x94, 0xa7, 0xce, 0xd1, 0x79, 0x3e, 0xac, 0xe0,
	0xd6, 0xf0, 0x4f, 0xd6, 0xa8, 0x16, 0xa7, 0xff, 0x03, 0xdb, 0x74, 0xd2, 0x8f, 0x50, 0xcf, 0x41,
	0xe7, 0xe8, 0x2c, 0x1f, 0x95, 0xf7, 0x6a, 0xf4, 0xf9, 0x6a, 0x91, 0x82, 0x8f, 0xe1, 0x44, 0x7f,
	0xd3, 0x5f, 0x9f, 0xf5, 0xe7, 0x79, 0xf4, 0x32, 0x80, 0x59, 0xc0, 0x05, 0x54, 0xf2, 0xcf, 0xd1,
	0xa7, 0x6b, 0x08, 0x66, 0x17, 0xdd, 0xf5, 0xc2, 0x74, 0xa1, 0xc9, 0x76, 0xf2, 0x9f, 0xea, 0xeb,
	0x37, 0x01, 0x00, 0x00, 0xff, 0xff, 0x68, 0xce, 0xef, 0x16, 0xf8, 0x0a, 0x00, 0x00,
}
